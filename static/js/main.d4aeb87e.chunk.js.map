{"version":3,"sources":["components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","Fragment","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","heading","value","onChange","event","console","log","target","rows","newText","toUpperCase","toLowerCase","alert","document","getElementById","select","navigator","clipboard","writeText","split","join","length","protoTypes","PropTypes","string","isRequired","about","defualtProps","App","setMode","body","style","backgroundColor","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.d4aeb87e.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n    <nav className={`navbar navbar-expand-lg clnavbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n      </ul>\r\n      <div className={`form-check form-switch text-${props.mode===\"light\"?\"dark\":\"light\"}`}>\r\n        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable {props.mode===\"light\"?\"dark\":\"light\"} mode</label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    </>\r\n  )\r\n}\r\n\r\nNavbar.protoTypes={\r\n    title : PropTypes.string.isRequired,\r\n    about : PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defualtProps={\r\n    title : \"Set Title Here\",\r\n    about : \"About Are Here\"\r\n}\r\n","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpClick = ()=> {\r\n        console.log(\"Convert to uppercase\"+ text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n    }\r\n    const handleLoClick = ()=> {\r\n        console.log(\"Convert to Lowercase\"+ text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n    }\r\n    const handleClearClick = ()=> {\r\n        console.log(\"Convert to Lowercase\"+ text);\r\n        let newText = \"\";\r\n        setText(newText)\r\n    }\r\n    const handleOnChange = (event)=> {\r\n        console.log(\"On change\");\r\n        setText(event.target.value)\r\n    }\r\n    const handleCopy = ()=>{\r\n        alert(\"Copied\");\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value)\r\n    }\r\n    const handleExtraSpaces = ()=>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n    }\r\n\r\n\r\n    const [text, setText] = useState('Enter Text Here');\r\n  return (\r\n    <>\r\n    <div className={`container text-${props.mode===\"light\"?\"dark\":\"light\"}`}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" value ={text} onChange={handleOnChange}  id=\"myBox\" rows=\"8\"></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n    </div>\r\n    <div className={`container mb-10 text-${props.mode===\"light\"?\"dark\":\"light\"}`}>\r\n        <h3>Your Text Summary</h3>\r\n        <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n        <h2>Preview</h2>\r\n        <p>{text}</p>\r\n    </div>\r\n   </>\r\n  )\r\n}\r\n","\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  \n  const toggleMode = ()=>{\n    if(mode === \"light\")\n    {\n      setMode(\"dark\");\n      document.body.style.backgroundColor=\"black\";\n    }\n    else{\n      setMode(\"light\")\n      document.body.style.backgroundColor= \"white\";\n    }\n  }\n  return (\n    <>\n    <Navbar title = \"Text Editor\" about = \"About\" mode={mode} toggleMode={toggleMode}/>\n    <div className = \"container my-3\">\n    <TextForm heading=\"Enter Text to Analyse\" mode={mode}/>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}